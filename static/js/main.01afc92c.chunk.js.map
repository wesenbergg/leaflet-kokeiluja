{"version":3,"sources":["RoutingMachine.js","RouterMap.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["Routing","map","this","props","L","control","waypoints","latLng","routeWhileDragging","geocoder","Control","Geocoder","nominatim","addTo","leafletElement","getPlan","MapLayer","withLeaflet","RouterMap","state","lat","lng","zoom","isMapInit","saveMap","setState","position","Map","center","ref","TileLayer","attribution","url","showMarkers","Component","Weather","useState","weather","setWeather","expanded","setExpanded","message","setMessage","useEffect","fetch","then","res","json","setTimeout","id","className","onClick","name","sys","country","date","Date","dt","split","slice","join","length","formatDate","src","icon","alt","Math","round","main","temp","class","scope","description","wind","speed","humidity","App","data","setData","network","stations","e","Marker","latitude","longitude","Popup","free_bikes","empty_slots","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.01afc92c.chunk.js","sourcesContent":["import { MapLayer } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet-routing-machine\";\r\nimport 'leaflet-control-geocoder';\r\nimport { withLeaflet } from \"react-leaflet\";\r\n\r\n// lat: 60.21825196984328,\r\n// lng: 25.05910387617357,\r\nclass Routing extends MapLayer {\r\n  createLeafletElement() {\r\n    const { map } = this.props;\r\n    let leafletElement = L.Routing.control(\r\n      {\r\n        waypoints: [\r\n            L.latLng(60.21825196984328, 25.05910387617357),\r\n            L.latLng(60.21825196984328, 25.05910387617357)\r\n        ],\r\n        routeWhileDragging: false,\r\n        geocoder: L.Control.Geocoder.nominatim()\r\n      }\r\n      ).addTo(map.leafletElement);\r\n    return leafletElement.getPlan();\r\n  }\r\n}\r\nexport default withLeaflet(Routing);","import React, { Component } from \"react\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport Routing from \"./RoutingMachine\";\r\n\r\nexport default class RouterMap extends Component {\r\n  // const { showMarkers } = this.props;\r\n  state = {\r\n    lat: 60.21825196984328,\r\n    lng: 25.05910387617357,\r\n    zoom: 15,\r\n    isMapInit: false,\r\n  };\r\n  saveMap = map => {\r\n    this.map = map;\r\n    this.setState({\r\n      isMapInit: true\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lng];\r\n    return (<>\r\n      <Map center={position} zoom={this.state.zoom} ref={this.saveMap}>\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {this.props.showMarkers()}\r\n        {this.state.isMapInit && <Routing map={this.map} />}\r\n      </Map>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst Weather = () => {\r\n  const [weather, setWeather] = useState()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const [message, setMessage] = useState(true)\r\n\r\n  useEffect( () => {\r\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=60.169&lon=24.938&appid=44ebf4647bda393b62fec194d66559e5\")\r\n    .then(res => res.json())\r\n    .then(res => setWeather(res))\r\n    setTimeout(() => setMessage(false), 2500)\r\n  }, [])\r\n\r\n  if(!weather) return <>asd</>\r\n  \r\n  const formatDate = () => {\r\n    const date = Date(weather.dt).split(' ').slice(0, 5).join(\" \")\r\n    return date.slice(0, date.length - 3)\r\n  }\r\n\r\n  return (\r\n    <div id=\"weather\" className={`pt-2 bg-dark text-light p-1 justify-content-center transparent ${expanded ? '': 'hide'}`} onClick={() => setExpanded(!expanded)} >\r\n    {message ? <small className=\"text-light exp-txt\">Click to expand</small>: ''}\r\n    <div id=\"wHead\" className=\"container-fluid row\">\r\n      <span className=\"col-6 col-sm-5 pb-5\">\r\n        <h3>Weather</h3>\r\n        <h4>{weather.name}, {weather.sys.country}</h4>\r\n        <small className=\"text-light\">\r\n          {formatDate()}\r\n        </small>\r\n      </span>\r\n      <div className=\"col-6 d-none d-md-block p-0 m-0\">\r\n        <div className=\"bg-blue w-100 ml-3\">\r\n          <img id=\"wicon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"Weather icon\" />\r\n        </div>\r\n        <div className=\"celsius d-inline-block text-right\">\r\n        <h3 className=\"font-300\">{Math.round(weather.main.temp - 273.15)}&#8451;</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div id=\"wData\" className={`container-fluid ${expanded ? '': 'd-none'}`}>\r\n      <table class=\"table table-striped table-dark transparent\">\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">Description</th>\r\n            <td> {weather.weather[0].main}, {weather.weather[0].description}</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">Wind</th>\r\n            <td>{weather.wind.speed} m/s</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">Humidity</th>\r\n            <td>{weather.main.humidity}%</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Marker, Popup } from 'react-leaflet'\r\nimport RouterMap from './RouterMap';\r\nimport Weather from './Weather';\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect( () => {\r\n    fetch(\"https://api.citybik.es/v2/networks/citybikes-helsinki\")\r\n    .then(res => res.json())\r\n    .then(res => setData(res.network.stations) )\r\n  }, [])\r\n\r\n  const showMarkers = () => data.map( e => \r\n    <Marker position={[e.latitude, e.longitude]}>\r\n      <Popup>\r\n        <h3>{e.name}</h3>\r\n        <p className=\"my-0\">Pyöriä jäljellä: {e.free_bikes}</p>\r\n        <p className=\"my-0\">Paikkoja vapaana: {e.empty_slots}</p>\r\n      </Popup>\r\n    </Marker>\r\n    )\r\n\r\n  return (\r\n    <div className=\"container-fluid row p-0 m-0\">\r\n        <RouterMap showMarkers={showMarkers}/>\r\n        <Weather />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}