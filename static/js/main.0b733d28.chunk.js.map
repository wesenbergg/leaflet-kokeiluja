{"version":3,"sources":["Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","useState","weather","setWeather","useEffect","fetch","then","res","json","id","className","name","sys","country","date","Date","dt","split","slice","join","length","formatDate","src","icon","alt","main","class","scope","description","wind","speed","humidity","visibility","coord","lon","lat","position","App","data","setData","network","stations","Map","center","zoom","TileLayer","url","attribution","map","e","Marker","latitude","longitude","Popup","free_bikes","empty_slots","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iRAqEeA,EAlEC,WAAO,IAAD,EACUC,qBADV,mBACbC,EADa,KACJC,EADI,KASpB,GANAC,qBAAW,WACTC,MAAM,gHACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIJ,EAAWI,QACvB,KAECL,EAAS,OAAO,2CAOpB,OACE,yBAAKO,GAAG,UAAUC,UAAU,iDAC5B,yBAAKD,GAAG,QAAQC,UAAU,4BACxB,0BAAMA,UAAU,uBACd,uCACA,4BAAKR,EAAQS,KAAb,KAAqBT,EAAQU,IAAIC,SACjC,2BAAOH,UAAU,cAXJ,WACjB,IAAMI,EAAOC,KAAKb,EAAQc,IAAIC,MAAM,KAAKC,MAAM,EAAG,GAAGC,KAAK,KAC1D,OAAOL,EAAKI,MAAM,EAAGJ,EAAKM,OAAS,GAU5BC,KAGL,yBAAKX,UAAU,mCACb,yBAAKA,UAAU,iBACb,yBAAKD,GAAG,QAAQa,IAAG,2CAAsCpB,EAAQA,QAAQ,GAAGqB,KAAzD,WAAwEC,IAAI,kBAEjG,yBAAKd,UAAU,qCACb,wBAAIA,UAAU,YAAd,YACA,uBAAGA,UAAU,aAAaR,EAAQA,QAAQ,GAAGuB,SAInD,yBAAKhB,GAAG,QAAQC,UAAU,mBAC1B,2BAAOgB,MAAM,kCACX,+BACE,4BACE,wBAAIC,MAAM,OAAV,eACA,4BAAKzB,EAAQA,QAAQ,GAAG0B,cAE1B,4BACE,wBAAID,MAAM,OAAV,QACA,4BAAKzB,EAAQ2B,KAAKC,MAAlB,SAEF,4BACE,wBAAIH,MAAM,OAAV,YACA,4BAAKzB,EAAQuB,KAAKM,SAAlB,MAEF,4BACE,wBAAIJ,MAAM,OAAV,cACA,4BAAKzB,EAAQ8B,WAAW,IAAxB,MAEF,4BACE,wBAAIL,MAAM,OAAV,SACA,iCAAOzB,EAAQ+B,MAAMC,IAArB,KAA4BhC,EAAQ+B,MAAME,IAA1C,YCxDJC,EAAW,CAAC,kBAAmB,WAuCtBC,EArCH,WAAO,IAAD,EACQpC,mBAAS,IADjB,mBACTqC,EADS,KACHC,EADG,KAGhBnC,qBAAW,WACTC,MAAM,yDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIgC,EAAQhC,EAAIiC,QAAQC,eAChC,IAYH,OACE,yBAAK/B,UAAU,+BACb,yBAAKA,UAAU,aACb,kBAACgC,EAAA,EAAD,CAAKC,OAAQP,EAAUQ,KAAM,IAC3B,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAhBIT,EAAKU,KAAK,SAAAC,GAAC,OACnC,kBAACC,EAAA,EAAD,CAAQd,SAAU,CAACa,EAAEE,SAAUF,EAAEG,YAC/B,kBAACC,EAAA,EAAD,KACE,4BAAKJ,EAAEtC,MACP,uBAAGD,UAAU,QAAb,gCAAsCuC,EAAEK,YACxC,uBAAG5C,UAAU,QAAb,qBAAuCuC,EAAEM,oBAgB3C,yBAAK7C,UAAU,aACb,kBAAC,EAAD,SCzBY8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0b733d28.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst Weather = () => {\r\n  const [weather, setWeather] = useState()\r\n\r\n  useEffect( () => {\r\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=60.169&lon=24.938&appid=44ebf4647bda393b62fec194d66559e5\")\r\n    .then(res => res.json())\r\n    .then(res => setWeather(res))\r\n  }, [])\r\n\r\n  if(!weather) return <>asd</>\r\n  \r\n  const formatDate = () => {\r\n    const date = Date(weather.dt).split(' ').slice(0, 5).join(\" \")\r\n    return date.slice(0, date.length - 3)\r\n  }\r\n\r\n  return (\r\n    <div id=\"weather\" className=\"bg-dark text-light p-4 justify-content-center\">\r\n    <div id=\"wHead\" className=\"container-fluid row mt-4\">\r\n      <span className=\"col-6 col-sm-5 pb-5\">\r\n        <h2>Weather</h2>\r\n        <h3>{weather.name}, {weather.sys.country}</h3>\r\n        <small className=\"text-muted\">\r\n          {formatDate()}\r\n        </small>\r\n      </span>\r\n      <div className=\"col-6 d-none d-md-block p-0 m-0\">\r\n        <div className=\"bg-blue w-100\">\r\n          <img id=\"wicon\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"Weather icon\" />\r\n        </div>\r\n        <div className=\"celsius d-inline-block text-right\">\r\n          <h1 className=\"font-300\">13&#8451;</h1>\r\n          <p className=\"lead my-0\">{weather.weather[0].main}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div id=\"wData\" className=\"container-fluid\">\r\n    <table class=\"table table-striped table-dark\">\r\n      <tbody>\r\n        <tr>\r\n          <th scope=\"row\">Description</th>\r\n          <td>{weather.weather[0].description}</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">Wind</th>\r\n          <td>{weather.wind.speed} m/s</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">Humidity</th>\r\n          <td>{weather.main.humidity}%</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">Visibility</th>\r\n          <td>{weather.visibility/100}%</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">Coord</th>\r\n          <td>[ {weather.coord.lon}, {weather.coord.lat} ]</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\r\nimport Weather from './Weather';\r\n\r\nconst position = [60.16985569999999, 24.938379]\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect( () => {\r\n    fetch(\"https://api.citybik.es/v2/networks/citybikes-helsinki\")\r\n    .then(res => res.json())\r\n    .then(res => setData(res.network.stations) )\r\n  }, [])\r\n\r\n  const showMarkers = () => data.map( e => \r\n    <Marker position={[e.latitude, e.longitude]}>\r\n      <Popup>\r\n        <h3>{e.name}</h3>\r\n        <p className=\"my-0\">Pyöriä jäljellä: {e.free_bikes}</p>\r\n        <p className=\"my-0\">Paikkoja vapaana: {e.empty_slots}</p>\r\n      </Popup>\r\n    </Marker>\r\n    )\r\n\r\n  return (\r\n    <div className=\"container-fluid row p-0 m-0\">\r\n      <div className=\"col-8 p-0\" >\r\n        <Map center={position} zoom={15}>\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n          />\r\n          {showMarkers()}\r\n        </Map>\r\n      </div>\r\n      <div className=\"col-4 p-0\">\r\n        <Weather />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}